{"ast":null,"code":"var _jsxFileName = \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport health from '@cloudnative/health-connect';\nlet healthCheck = new health.HealthChecker();\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n  const appFunctioning = true; // You should change the above to a task to determine if your app is functioning correctly\n\n  if (appFunctioning) {\n    resolve();\n  } else {\n    reject(new Error(\"App is not functioning correctly\"));\n  }\n});\n\nlet liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }\n  }));\n}\n\nMyApp.use('/live', health.LivenessEndpoint(healthCheck));\nMyApp.use('/ready', health.ReadinessEndpoint(healthCheck));\nMyApp.use('/health', health.HealthEndpoint(healthCheck));\nhealthCheck.registerLivenessCheck(liveCheck); // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js"],"names":["App","health","healthCheck","HealthChecker","livePromise","Promise","resolve","_reject","appFunctioning","reject","Error","liveCheck","LivenessCheck","MyApp","Component","pageProps","use","LivenessEndpoint","ReadinessEndpoint","HealthEndpoint","registerLivenessCheck"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AAEA,IAAIC,WAAW,GAAG,IAAID,MAAM,CAACE,aAAX,EAAlB;;AAEA,MAAMC,WAAW,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAExD,QAAMC,cAAc,GAAG,IAAvB,CAFwD,CAGxD;;AACA,MAAIA,cAAJ,EAAoB;AAClBF,IAAAA,OAAO;AACR,GAFD,MAEO;AACLG,IAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,kCAAV,CAAD,CAAN;AACD;AACF,CATuB,CAA1B;;AAWE,IAAIC,SAAS,GAAG,IAAIV,MAAM,CAACW,aAAX,CAAyB,eAAzB,EAA0CR,WAA1C,CAAhB;;AAIF,SAASS,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AACrC,SAAO,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAEDF,KAAK,CAACG,GAAN,CAAU,OAAV,EAAmBf,MAAM,CAACgB,gBAAP,CAAwBf,WAAxB,CAAnB;AACAW,KAAK,CAACG,GAAN,CAAU,QAAV,EAAoBf,MAAM,CAACiB,iBAAP,CAAyBhB,WAAzB,CAApB;AACAW,KAAK,CAACG,GAAN,CAAU,SAAV,EAAqBf,MAAM,CAACkB,cAAP,CAAsBjB,WAAtB,CAArB;AACAA,WAAW,CAACkB,qBAAZ,CAAkCT,SAAlC,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeE,KAAf","sourcesContent":["import App from 'next/app'\nimport health from '@cloudnative/health-connect'\n\nlet healthCheck = new health.HealthChecker();\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n\n    const appFunctioning = true;\n    // You should change the above to a task to determine if your app is functioning correctly\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n \n  let liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n \n  \n\nfunction MyApp({ Component, pageProps }) {\n    return <Component {...pageProps} />\n  }\n\n  MyApp.use('/live', health.LivenessEndpoint(healthCheck));\n  MyApp.use('/ready', health.ReadinessEndpoint(healthCheck));\n  MyApp.use('/health', health.HealthEndpoint(healthCheck));\n  healthCheck.registerLivenessCheck(liveCheck);\n  \n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default MyApp"]},"metadata":{},"sourceType":"module"}