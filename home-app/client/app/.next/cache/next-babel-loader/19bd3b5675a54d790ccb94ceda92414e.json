{"ast":null,"code":"var _jsxFileName = \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\n\nconst health = require('@cloudnative/health-connect');\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n  const appFunctioning = true; // You should change the above to a task to determine if your app is functioning correctly\n\n  if (appFunctioning) {\n    resolve();\n  } else {\n    reject(new Error(\"App is not functioning correctly\"));\n  }\n});\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  let liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n  let healthCheck = new health.HealthChecker();\n  healthCheck.registerLivenessCheck(liveCheck);\n  App.use('/live', health.LivenessEndpoint(healthCheck));\n  App.use('/ready', health.ReadinessEndpoint(healthCheck));\n  App.use('/health', health.HealthEndpoint(healthCheck));\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 10\n    }\n  }));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default MyApp;","map":{"version":3,"sources":["/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js"],"names":["App","health","require","livePromise","Promise","resolve","_reject","appFunctioning","reject","Error","MyApp","Component","pageProps","liveCheck","LivenessCheck","healthCheck","HealthChecker","registerLivenessCheck","use","LivenessEndpoint","ReadinessEndpoint","HealthEndpoint"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,6BAAD,CAAtB;;AAEA,MAAMC,WAAW,GAAG,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAExD,QAAMC,cAAc,GAAG,IAAvB,CAFwD,CAGxD;;AACA,MAAIA,cAAJ,EAAoB;AAClBF,IAAAA,OAAO;AACR,GAFD,MAEO;AACLG,IAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,kCAAV,CAAD,CAAN;AACD;AACF,CATuB,CAA1B;;AAYA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAErC,MAAIC,SAAS,GAAG,IAAIZ,MAAM,CAACa,aAAX,CAAyB,eAAzB,EAA0CX,WAA1C,CAAhB;AACA,MAAIY,WAAW,GAAG,IAAId,MAAM,CAACe,aAAX,EAAlB;AACAD,EAAAA,WAAW,CAACE,qBAAZ,CAAkCJ,SAAlC;AACAb,EAAAA,GAAG,CAACkB,GAAJ,CAAQ,OAAR,EAAiBjB,MAAM,CAACkB,gBAAP,CAAwBJ,WAAxB,CAAjB;AACAf,EAAAA,GAAG,CAACkB,GAAJ,CAAQ,QAAR,EAAkBjB,MAAM,CAACmB,iBAAP,CAAyBL,WAAzB,CAAlB;AACAf,EAAAA,GAAG,CAACkB,GAAJ,CAAQ,SAAR,EAAmBjB,MAAM,CAACoB,cAAP,CAAsBN,WAAtB,CAAnB;AAEF,SAAO,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACC,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,KAAf","sourcesContent":["import App from 'next/app'\nconst health = require('@cloudnative/health-connect');\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n\n    const appFunctioning = true;\n    // You should change the above to a task to determine if your app is functioning correctly\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n \n\nfunction MyApp({ Component, pageProps }) {\n   \n    let liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n    let healthCheck = new health.HealthChecker();\n    healthCheck.registerLivenessCheck(liveCheck);\n    App.use('/live', health.LivenessEndpoint(healthCheck));\n    App.use('/ready', health.ReadinessEndpoint(healthCheck));\n    App.use('/health', health.HealthEndpoint(healthCheck));\n\n  return <Component {...pageProps} />\n  }\n\n \n \n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default MyApp"]},"metadata":{},"sourceType":"module"}