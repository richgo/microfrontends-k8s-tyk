{"ast":null,"code":"import _extends from \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\nimport health from '@cloudnative/health-connect';\n\nvar livePromise = function livePromise() {\n  return new Promise(function (resolve, _reject) {\n    var appFunctioning = true; // You should change the above to a task to determine if your app is functioning correctly\n\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n};\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  var liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n  var healthCheck = new health.HealthChecker();\n  healthCheck.registerLivenessCheck(liveCheck);\n  this.use('/live', health.LivenessEndpoint(healthCheck));\n  this.use('/ready', health.ReadinessEndpoint(healthCheck));\n  this.use('/health', health.HealthEndpoint(healthCheck));\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js"],"names":["App","health","livePromise","Promise","resolve","_reject","appFunctioning","reject","Error","MyApp","Component","pageProps","liveCheck","LivenessCheck","healthCheck","HealthChecker","registerLivenessCheck","use","LivenessEndpoint","ReadinessEndpoint","HealthEndpoint"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AAExD,QAAMC,cAAc,GAAG,IAAvB,CAFwD,CAGxD;;AACA,QAAIA,cAAJ,EAAoB;AAClBF,MAAAA,OAAO;AACR,KAFD,MAEO;AACLG,MAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,kCAAV,CAAD,CAAN;AACD;AACF,GATuB,CAAN;AAAA,CAApB;;AAcA,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AAErC,MAAIC,SAAS,GAAG,IAAIX,MAAM,CAACY,aAAX,CAAyB,eAAzB,EAA0CX,WAA1C,CAAhB;AACA,MAAIY,WAAW,GAAG,IAAIb,MAAM,CAACc,aAAX,EAAlB;AACAD,EAAAA,WAAW,CAACE,qBAAZ,CAAkCJ,SAAlC;AACA,OAAKK,GAAL,CAAS,OAAT,EAAkBhB,MAAM,CAACiB,gBAAP,CAAwBJ,WAAxB,CAAlB;AACA,OAAKG,GAAL,CAAS,QAAT,EAAmBhB,MAAM,CAACkB,iBAAP,CAAyBL,WAAzB,CAAnB;AACA,OAAKG,GAAL,CAAS,SAAT,EAAoBhB,MAAM,CAACmB,cAAP,CAAsBN,WAAtB,CAApB;AAEF,SAAO,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACC,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAxBOF,K;AA0BP,eAAeA,KAAf","sourcesContent":["import App from 'next/app'\nimport health from '@cloudnative/health-connect'\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n\n    const appFunctioning = true;\n    // You should change the above to a task to determine if your app is functioning correctly\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n \n  \n  \n\nfunction MyApp({ Component, pageProps }) {\n   \n    let liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n    let healthCheck = new health.HealthChecker();\n    healthCheck.registerLivenessCheck(liveCheck);\n    this.use('/live', health.LivenessEndpoint(healthCheck));\n    this.use('/ready', health.ReadinessEndpoint(healthCheck));\n    this.use('/health', health.HealthEndpoint(healthCheck));\n\n  return <Component {...pageProps} />\n  }\n\n \n \n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default MyApp"]},"metadata":{},"sourceType":"module"}