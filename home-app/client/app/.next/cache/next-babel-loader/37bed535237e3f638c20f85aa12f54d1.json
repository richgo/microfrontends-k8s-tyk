{"ast":null,"code":"import _extends from \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/node_modules/@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from 'next/app';\n\nvar health = require('@cloudnative/health-connect');\n\nvar healthCheck = new health.HealthChecker();\n\nvar livePromise = function livePromise() {\n  return new Promise(function (resolve, _reject) {\n    var appFunctioning = true; // You should change the above to a task to determine if your app is functioning correctly\n\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n};\n\nvar liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\nhealthCheck.registerLivenessCheck(liveCheck);\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 10\n    }\n  }));\n}\n\n_c = MyApp;\napp.use('/live', health.LivenessEndpoint(healthCheck));\napp.use('/ready', health.ReadinessEndpoint(healthCheck));\napp.use('/health', health.HealthEndpoint(healthCheck)); // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/Richard.James2/dev/microfrontends-dapr/home-app/client/app/pages/_app.js"],"names":["App","health","require","healthCheck","HealthChecker","livePromise","Promise","resolve","_reject","appFunctioning","reject","Error","liveCheck","LivenessCheck","registerLivenessCheck","MyApp","Component","pageProps","app","use","LivenessEndpoint","ReadinessEndpoint","HealthEndpoint"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,6BAAD,CAAtB;;AACA,IAAIC,WAAW,GAAG,IAAIF,MAAM,CAACG,aAAX,EAAlB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SAAM,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,OAAV,EAAsB;AAExD,QAAMC,cAAc,GAAG,IAAvB,CAFwD,CAGxD;;AACA,QAAIA,cAAJ,EAAoB;AAClBF,MAAAA,OAAO;AACR,KAFD,MAEO;AACLG,MAAAA,MAAM,CAAC,IAAIC,KAAJ,CAAU,kCAAV,CAAD,CAAN;AACD;AACF,GATuB,CAAN;AAAA,CAApB;;AAWE,IAAIC,SAAS,GAAG,IAAIX,MAAM,CAACY,aAAX,CAAyB,eAAzB,EAA0CR,WAA1C,CAAhB;AAEAF,WAAW,CAACW,qBAAZ,CAAkCF,SAAlC;;AAGF,SAASG,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACvC,SAAO,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACC;;KAFMF,K;AAKPG,GAAG,CAACC,GAAJ,CAAQ,OAAR,EAAiBlB,MAAM,CAACmB,gBAAP,CAAwBjB,WAAxB,CAAjB;AACAe,GAAG,CAACC,GAAJ,CAAQ,QAAR,EAAkBlB,MAAM,CAACoB,iBAAP,CAAyBlB,WAAzB,CAAlB;AACAe,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBlB,MAAM,CAACqB,cAAP,CAAsBnB,WAAtB,CAAnB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeY,KAAf","sourcesContent":["import App from 'next/app'\nconst health = require('@cloudnative/health-connect');\nlet healthCheck = new health.HealthChecker();\n\nconst livePromise = () => new Promise((resolve, _reject) => {\n\n    const appFunctioning = true;\n    // You should change the above to a task to determine if your app is functioning correctly\n    if (appFunctioning) {\n      resolve();\n    } else {\n      reject(new Error(\"App is not functioning correctly\"));\n    }\n  });\n \n  let liveCheck = new health.LivenessCheck(\"LivenessCheck\", livePromise);\n \n  healthCheck.registerLivenessCheck(liveCheck);\n \n\nfunction MyApp({ Component, pageProps }) {\n  return <Component {...pageProps} />\n  }\n\n \n  app.use('/live', health.LivenessEndpoint(healthCheck));\n  app.use('/ready', health.ReadinessEndpoint(healthCheck));\n  app.use('/health', health.HealthEndpoint(healthCheck));\n \n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default MyApp"]},"metadata":{},"sourceType":"module"}