{"ast":null,"code":"var _jsxFileName = \"/Users/Richard.James2/dev/microfrontends-dapr/products-app/client/product/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport withApollo from 'next-with-apollo';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nconst yup = require('yup');\n\nrequire('dotenv').config();\n\nlet graphUrl = process.env.GRAPH_URL;\n\nconst App = ({\n  Component,\n  pageProps,\n  apollo\n}) => __jsx(ApolloProvider, {\n  client: apollo,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }\n}, __jsx(Component, _extends({}, pageProps, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }\n})));\n\nexport default withApollo(({\n  initialState\n}) => {\n  console.log(graphUrl);\n  console.log(process.env.GRAPH_URL);\n  return new ApolloClient({\n    uri: graphUrl,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n})(App);","map":{"version":3,"sources":["/Users/Richard.James2/dev/microfrontends-dapr/products-app/client/product/pages/_app.js"],"names":["withApollo","ApolloProvider","ApolloClient","InMemoryCache","yup","require","config","graphUrl","process","env","GRAPH_URL","App","Component","pageProps","apollo","initialState","console","log","uri","cache","restore"],"mappings":";;;;;;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAA3B;;AAEA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAD,KACV,MAAC,cAAD;AAAgB,EAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF,CADF;;AAMA,eAAeb,UAAU,CAAC,CAAC;AAAEe,EAAAA;AAAF,CAAD,KAAsB;AAC9CC,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAO,CAACC,GAAR,CAAYC,SAAxB;AACA,SAAO,IAAIR,YAAJ,CAAiB;AACtBgB,IAAAA,GAAG,EAAEX,QADiB;AAEtBY,IAAAA,KAAK,EAAE,IAAIhB,aAAJ,GAAoBiB,OAApB,CAA4BL,YAAY,IAAI,EAA5C;AAFe,GAAjB,CAAP;AAID,CAPwB,CAAV,CAOZJ,GAPY,CAAf","sourcesContent":["import withApollo from 'next-with-apollo';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\nconst yup = require('yup');\nrequire('dotenv').config()\n\nlet graphUrl = process.env.GRAPH_URL\n\nconst App = ({ Component, pageProps, apollo }) => (\n  <ApolloProvider client={apollo}>\n    <Component {...pageProps} />\n  </ApolloProvider>\n);\n \nexport default withApollo(({ initialState }) => {\n  console.log(graphUrl)\n  console.log(process.env.GRAPH_URL)\n  return new ApolloClient({\n    uri: graphUrl,\n    cache: new InMemoryCache().restore(initialState || {})\n  });\n})(App);"]},"metadata":{},"sourceType":"module"}